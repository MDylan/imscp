#!/usr/bin/perl

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2014 by internet Multi Server Control Panel
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#
# @category    i-MSCP
# @copyright   2010-2014 by i-MSCP | http://i-mscp.net
# @author      Daniel Andreca <sci2tech@gmail.com>
# @author      Laurent Declercq <l.declercq@nuxwin.com>
# @link        http://i-mscp.net i-MSCP Home Site
# @license     http://www.gnu.org/licenses/gpl-2.0.html GPL v2

use strict;
use warnings;

no if $] >= 5.017011, warnings => 'experimental::smartmatch';

use FindBin;
use lib "$FindBin::Bin", "$FindBin::Bin/PerlLib", "$FindBin::Bin/PerlVendor";

use iMSCP::Debug;
use iMSCP::Bootstrapper;
use iMSCP::HooksManager;
use iMSCP::Execute;
use MIME::Base64;

# Turn off localisation features to force any command output to be in english
$ENV{'LC_MESSAGES'} = 'C';

# Do not clear screen at end of script
$ENV{'IMSCP_CLEAR_SCREEN'} = 0;

# Mode in which the request dispatcher is triggered
# For now, this variable is only used by i-MSCP installer/setup scripts
$main::execmode = shift || '';

umask(027);

newDebug('imscp-rqst-mngr.log');

silent(1);

iMSCP::Bootstrapper->getInstance()->boot({ 'norequirements' => 'yes' });

sub _process
{
	my ($moduleName, $sql, $ipModule) = @_;
	my $rs = 0;

	debug("Processing $moduleName module items");

	if ($main::execmode ne 'setup') {
		print("=======================\n");
		print("Processing $moduleName items.\n");
	}

	my $rdata = iMSCP::Database->factory()->doQuery('id', $sql);
	unless(ref $rdata eq 'HASH') {
		error($rdata);
		return 1;
	}

	if(%{$rdata}) {
		my $i = 1;
		my $totalItems = scalar keys %{$rdata};

		for (keys %{$rdata}) {
			my $id = $rdata->{$_}->{'id'};
			my $name = $rdata->{$_}->{'name'};
			my $status = $rdata->{$_}->{'status'};

			$$ipModule++ if $moduleName ~~ ['Domain', 'Subdomain', 'Alias', 'SubAlias'];

			debug("Processing $id, $name, $status.");

			if($main::execmode ne 'setup') {
				print("Processing $id, $name, $status. ($i of $totalItems: remaining " . ($totalItems - $i) . ")\n");
			} else {
				print STDOUT ("$moduleName\t$status\t$name\t$id\t$totalItems\t$i\n");
			}

			$i++;

			newDebug("${moduleName}_module_$name.log");

			my $package = "Modules::$moduleName";

			eval "require $package";

			unless($@) {
				$rs = $package->new()->process($id);
			} else {
				error($@);
				$rs = 1;
			}

			endDebug();

			if($rs) {
				error("Error while processing $id, $name, $status.");
				my $logDir = defined $main::imscpConfig{'LOG_DIR'} ? $main::imscpConfig{'LOG_DIR'} : '';
				error("See $logDir/${moduleName}_module_$name.log for more details.");
			}

			return $rs if $rs;
		}
	} else {
		debug("No item to process for the $moduleName module.");
		if ($main::execmode ne 'setup') {
			print("No item found.\n");
		}
	}

	0;
}

sub run
{
	# Process plugins
	# Should always be processed first to allow plugins to register their listeners on the hooks manager
	my $rs = _process(
		'Plugin',
		"
			SELECT
				plugin_id AS id, plugin_name AS name, plugin_status AS status
			FROM
				plugin
			WHERE
				plugin_status IN ('enabled', 'toinstall', 'toenable', 'toupdate', 'tochange', 'todisable', 'touninstall')
			AND
				plugin_error IS NULL
			AND
				plugin_backend = 'yes'
		"
	);

	$rs ||= iMSCP::HooksManager->getInstance()->trigger('beforeDispatchRequest');

	# Process toadd|tochange SSL certificates tasks
	$rs ||= _process(
		'Certificates',
		"
			SELECT
				cert_id AS id, type AS name, status AS status
			FROM
				ssl_certs
			WHERE
				status IN ('toadd', 'tochange', 'todelete')
		"
	);

	## Process softwares packages toadd tasks
	$rs ||= _process(
		'SoftwarePackage'
		"
			SELECT
				software_id AS id, software_name AS name, software_status AS status
			FROM
				web_software
			WHERE
				software_status = 'toadd'
		"
	);

	# Process software instances toadd|todelete tasks
	$rs ||= _process(
		'SoftwareInstance'
		"
			SELECT
				software_id AS id, software_name AS name, software_status AS status
			FROM
				web_software_inst
			WHERE
				software_status IN ('toadd', 'todelete')
		"
	);

	# Process toadd|tochange users tasks
	$rs ||= _process(
		'User',
		"
			SELECT
				admin_id AS id, admin_name AS name, admin_status AS status
			FROM
				admin
			WHERE
				admin_type = 'user'
			AND
				admin_status IN ('toadd', 'tochange')
		"
	);

	my $ipsModule = 0;

	# Process toadd|tochange|torestore|toenable|todisable domain tasks
	$rs ||= _process(
		'Domain',
		"
			SELECT
				domain_id AS id, domain_name AS name, domain_status AS status
			FROM
				domain
			WHERE
				domain_status IN ('toadd', 'tochange', 'torestore', 'toenable', 'todisable')
		",
		\$ipsModule
	);

	# Process toadd|tochange|torestore|toenable|todisable subdomains tasks
	$rs ||= _process(
		'Subdomain',
		"
			SELECT
				subdomain_id AS id, subdomain_name AS name, subdomain_status AS status
			FROM
				subdomain
			WHERE
				subdomain_status IN ('toadd', 'tochange', 'torestore', 'toenable', 'todisable')
		",
		\$ipsModule
	);

	# Process toadd|tochange|torestore|toenable|todisable domain aliases tasks
	$rs ||= _process(
		'Alias',
		 "
			SELECT
				alias_id AS id, alias_name AS name, alias_status AS status
			FROM
				domain_aliasses
			WHERE
				alias_status IN ('toadd', 'tochange', 'torestore', 'toenable', 'todisable')
		 ",
		 \$ipsModule
	);

	# Process toadd|tochange|torestore|toenable|todisable subdomains of domain aliases tasks
	$rs ||= _process(
		'SubAlias',
		"
			SELECT
				subdomain_alias_id AS id, subdomain_alias_name AS name, subdomain_alias_status AS status
			FROM
				subdomain_alias
			WHERE
				subdomain_alias_status IN ('toadd', 'tochange', 'torestore', 'toenable', 'todisable')
		",
		\$ipsModule
	);

	# Process toadd|tochange|toenable|todisable|todelete mail tasks
	$rs ||= _process(
		'Mail',
		"
			SELECT
				mail_id AS id, mail_addr AS name, status AS status
			FROM
				mail_users
			WHERE
				status IN ('toadd', 'tochange', 'toenable', 'todelete', 'todisable')
		"
	);

	# Process toadd|tochange|todelete Htusers tasks
	$rs ||= _process(
		'Htusers',
		"
			SELECT
				id, uname AS name, status
			FROM
				htaccess_users
			WHERE
				status IN ('toadd', 'tochange', 'todelete')
		"
	);

	# Process toadd|tochange|todelete Htgroups tasks
	$rs ||= _process(
		'Htgroup',
		"
			SELECT
				id AS id, CONCAT(ugroup, ':', id) AS name, status
			FROM
				htaccess_groups
			WHERE
				status IN ('toadd', 'tochange', 'todelete')
		"
	);

	# Process toadd|tochange|todelete Htaccess tasks
	$rs ||= _process(
		'Htaccess',
		"
			SELECT
				id, auth_name AS name, status
			FROM
				htaccess
			WHERE
				status IN ('toadd', 'tochange', 'todelete')
		"
	);

	# Process todelete subdomain aliases tasks
	$rs ||= _process(
		'SubAlias',
		"
			SELECT
				subdomain_alias_id AS id, subdomain_alias_name AS name, subdomain_alias_status AS status
			FROM
				subdomain_alias
			WHERE
				subdomain_alias_status = 'todelete'
		",
		\$ipsModule
	);

	# Process todelete domain aliases tasks
	$rs ||= _process(
		'Alias',
		"
			SELECT
				alias_id AS id, alias_name AS name, alias_status AS status
			FROM
				domain_aliasses
			WHERE
				alias_status = 'todelete'
		",
		\$ipsModule
	);

	# Process todelete subdomains tasks
	$rs ||= _process(
		'Subdomain',
		"
			SELECT
				subdomain_id AS id, subdomain_name AS name, subdomain_status AS status
			FROM
				subdomain
			WHERE
				subdomain_status = 'todelete'
		",
		\$ipsModule
	);

	# Process todelete domains tasks
	$rs ||= _process(
		'Domain',
		"
			SELECT
				domain_id AS id, domain_name AS name, domain_status AS status
			FROM
				domain
			WHERE
				domain_status = 'todelete'
		",
		\$ipsModule
	);

	# Process todelete users tasks
	$rs ||= _process(
		'User',
		"
			SELECT
				admin_id AS id, admin_name AS name, admin_status AS status
			FROM
				admin
			WHERE
				admin_type = 'user'
			AND
				admin_status = 'todelete'
		"
	);

	# Process network cards tasks
	$rs ||= _process(
		'NetCard',
		"
			SELECT
				ip_id AS id, ip_status AS name, ip_status AS status
			FROM
				server_ips
			WHERE
				ip_status <> 'ok'
		"
	);

	# Process IP addresses tasks
	unless($rs || ! $ipsModule) {
		newDebug("Ips_module.log");

		eval { require Modules::Ips };

		unless($@) {
			$rs = Modules::Ips->new()->process();
		} else {
			error($@);
			$rs = 1;
		}

		endDebug();
	}

	iMSCP::HooksManager->getInstance()->trigger('afterDispatchRequest', $rs);

	$rs;
}

exit run();
